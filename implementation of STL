void PowerofStl()
{
// [x, y]

  set< pair<int, int> > S;
  
  {1,3}, {343, -14} 
  
  // {a,c} less than pair {b,d} iff (a<b) or (a == b and c < d)

  S.insert({10,20});
  S.insert({2,3});
  S.insert({401,450});
  S.insert({30,400});
  
  // 2,3
  // 10,20
  // 30,400
  // 401,450
  // give interval -> done is logN time!
  // sets will always be stored in ascending order

set < pair <int, int> > S

// since set is composed of pairs, we will do upper bound on pairs

int point = 50;

auto it = S.upper_bound({point, INT_MAX});
it--;

pair<int, int> current = *it;

// corner case in which it-- goes back to a pair that does not exist

if(it == S.begin())
{
  cout << "the given point is not lying in any interval...\n";
  return;
}

if(current.first <= point && point <= current.second){
  cout << "yes it is present: " << current.first << " " << current.second << endl;
else 
{
  cout << "the given point is not lying in any interval...\n;
}


}
